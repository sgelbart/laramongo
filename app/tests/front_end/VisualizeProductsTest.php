<?php

use Selenium\Locator as l;
use Zizaco\FactoryMuff\Facade\FactoryMuff as f;

class VisualizeProductsTest extends AcceptanceTestCase
{

    /**
     * Clean collection between every test
     */
    public function setUp()
    {
        parent::setUp();
        $this->cleanCollection( 'categories' );
        $this->cleanCollection( 'products' );
    }

    public function testShouldDoQuicksearch()
    {
        $this->buildSampleProducts();

        // Search using ajax
        $this->browser
            ->open('/admin/products')
            ->type(l::IdOrName('search'), 'ProductB')
            ->typeKeys(l::IdOrName('search'), 'ProductB');

        sleep(1);

        $this->assertElementHasText(l::id('product-index'), 'ProductB');
        $this->assertElementHasNotText(l::id('product-index'), 'ProductA');

        // Search using query strings
        $this->browser->open('/admin/products?search=ProductA');

        $this->assertElementHasNotText(l::id('product-index'), 'ProductB');
        $this->assertElementHasText(l::id('product-index'), 'ProductA');

        // Should be case unsensitive
        $this->browser->open('/admin/products?search=product');

        $this->assertElementHasText(l::id('product-index'), 'ProductB');
        $this->assertElementHasText(l::id('product-index'), 'ProductA');

        // Search by LM
        $this->browser->open('/admin/products?search=12');

        $this->assertElementHasText(l::id('product-index'), 'ProductB');
        $this->assertElementHasNotText(l::id('product-index'), 'ProductA');

        // Search by LM
        $this->browser->open('/admin/products?search=1');

        $this->assertElementHasText(l::id('product-index'), 'ProductB');
        $this->assertElementHasText(l::id('product-index'), 'ProductA');
    }

    public function testDeactvatedProductsInQuicksearch()
    {
        $this->buildSampleProducts();

        $prod = Product::first(111);
        $prod->deactivate();
        $prod->save();

        $this->browser->open('/admin/products?search=ProductB');

        $this->assertElementHasText(l::id('product-index'), 'ProductB');
        $this->assertElementHasNotText(l::id('product-index'), 'ProductA');

        // Search using query strings
        $this->browser->open('/admin/products?search=ProductA');

        $this->assertElementHasNotText(l::id('product-index'), 'ProductB');
        $this->assertElementHasNotText(l::id('product-index'), 'ProductA');

        // Should be case unsensitive
        $this->browser->open('/admin/products?search=product');

        $this->assertElementHasText(l::id('product-index'), 'ProductB');
        $this->assertElementHasNotText(l::id('product-index'), 'ProductA');

        // Search using query strings
        $this->browser->open('/admin/products?search=ProductA&deactivated=true');

        $this->assertElementHasNotText(l::id('product-index'), 'ProductB');
        $this->assertElementHasText(l::id('product-index'), 'ProductA');

        // Should be case unsensitive
        $this->browser->open('/admin/products?search=product&deactivated=true');

        $this->assertElementHasText(l::id('product-index'), 'ProductB');
        $this->assertElementHasText(l::id('product-index'), 'ProductA');
    }

    /**
     * Create a leaf category and populates it with two products:
     * 'ProductA' and 'ProductB' with the respective LMs: '111', '123'.
     *
     * @return mixed Value.
     */
    private function buildSampleProducts()
    {
        $category = f::create('Category', ['kind'=>'leaf']);

        f::create('Product',
            ['_id'=>111, 'lm'=>'111',  'name'=>'ProductA', 'category'=>(string)$category->_id]
        );

        f::create('Product',
            ['_id'=>123, 'lm'=>'123', 'name'=>'ProductB', 'category'=>(string)$category->_id]
        );

        // PS: The 'lm' string key is generated by Products when saving.
        // check the tests/model/ProductTest.php for more info
    }
}
